class Solution {
    public int maxDiff(int num) {
        int maxNumber = num;
        int minNumber = num;

        Predicate<String> isAllDigitNine = (number -> number.replaceAll(String.valueOf('9'),"").isEmpty());
        Predicate<String> isFirstDigitNine = (number -> {

            char firstChar = number.charAt(0);
            int firstDigit = Character.getNumericValue(firstChar);

            return firstDigit == 9;
        });
        Predicate<String> isFirstDigitOne = (number -> {

            char firstChar = number.charAt(0);
            int firstDigit = Character.getNumericValue(firstChar);

            return firstDigit == 1;
        });
        Predicate<Integer> isSingleDigit = (digit -> digit < 10);
        BinaryOperator<String> replaceDigitWithMax = (number, digit) -> number.replaceAll(digit,"9");
        BinaryOperator<String> replaceDigitWithMin = (number, digit) -> number.replaceAll(digit,"0");


        String number = Integer.toString(num);

        if (isSingleDigit.test(num)) {
            maxNumber = 9;
        }
        else if (isAllDigitNine.test(number)) {
            maxNumber = num;
        }
        else if (isFirstDigitNine.negate().test(number)) {
            maxNumber = Integer.parseInt(number.replaceAll(String.valueOf(number.charAt(0)), "9"));
        }
        else {

            for (char c : number.toCharArray()) {
                if (Character.getNumericValue(c) != 9) {

                    maxNumber = Integer.parseInt(replaceDigitWithMax.apply(number, String.valueOf(Character.getNumericValue(c))));
                    break;
                }

            }
        }
        if (isSingleDigit.test(num)) {
            minNumber = 1;
        }
        else if (isFirstDigitOne.negate().test(number)) {
            minNumber = Integer.parseInt(number.replaceAll(String.valueOf(number.charAt(0)), "1"));
        }
        else {

            for (char c : number.toCharArray()) {
                if (Character.getNumericValue(c) != 1 && Character.getNumericValue(c) != 0) {

                    minNumber = Integer.parseInt(replaceDigitWithMin.apply(number, String.valueOf(Character.getNumericValue(c))));
                    break;
                }

            }
        }

        return (maxNumber-minNumber);
    } 
    
}
