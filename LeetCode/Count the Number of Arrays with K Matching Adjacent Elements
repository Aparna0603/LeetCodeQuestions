class Solution {
    static final int MOD = 1_000_000_007;
      long[] fact, invFact;
    public int countGoodArrays(int n, int m, int k) {
        
 
       initFactorials(n);  // Precompute factorials up to n

        long comb = nCr(n - 1, k);
        long pow = modPow(m - 1, n - 1 - k);
        long result = comb * pow % MOD;
        result = result * m % MOD;

        return (int) result;
    }

    // Precompute factorials and inverse factorials
    void initFactorials(int n) {
        fact = new long[n + 1];
        invFact = new long[n + 1];

        fact[0] = invFact[0] = 1;
        for (int i = 1; i <= n; i++) {
            fact[i] = fact[i - 1] * i % MOD;
        }
        invFact[n] = modInv(fact[n]);
        for (int i = n - 1; i >= 1; i--) {
            invFact[i] = invFact[i + 1] * (i + 1) % MOD;
        }
    }

    long nCr(int n, int r) {
        if (r < 0 || r > n) return 0;
        return fact[n] * invFact[r] % MOD * invFact[n - r] % MOD;
    }

    long modPow(long base, long exp) {
        long res = 1;
        base %= MOD;
        while (exp > 0) {
            if ((exp & 1) == 1) res = res * base % MOD;
            base = base * base % MOD;
            exp >>= 1;
        }
        return res;
    }

    long modInv(long x) {
        return modPow(x, MOD - 2);
    }
}
